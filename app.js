// =================================================================================
// VIBE CODE - FLOOD REPORT DASHBOARD - APP SCRIPT (SIMPLIFIED)
// =================================================================================

// --- ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è [‡∏™‡πà‡∏ß‡∏ô CONFIGURATION] ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è ---
        const API_URL = 'https://script.google.com/macros/s/AKfycbzGA2Gz0bZsQW7N-jz4DAi2x8q3reHuMUNDtrLRHrU0QcNw8rWf4nWNHe5eZQqJdOug/exec'; 
        const GOOGLE_FORM_URL = 'https://docs.google.com/forms/d/e/1FAIpQLScuoUkFuLN9nmBYbtuEGVXqWmB1-Emt-BnXFzSJLfCa0CgE3w/viewform';
        const LATITUDE_ENTRY_ID = 'entry.1052841070';
        const LONGITUDE_ENTRY_ID = 'entry.1200776748';
// Global variables
let map;
let allData = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
const mapMarkers = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡∏≠‡∏á marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Logic ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function setupReportButton() {
    const reportButton = document.getElementById('report-btn');
    const statusElement = document.getElementById('geolocation-status');

    if (!reportButton || !statusElement) return;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å
    const handlePermissionDenied = () => {
        reportButton.disabled = true;
        reportButton.textContent = '‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
        statusElement.textContent = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï';
        statusElement.style.display = 'block';
    };
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    const requestLocation = () => {
        reportButton.disabled = true;
        reportButton.textContent = 'üõ∞Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î...';
        statusElement.style.display = 'none';

        navigator.geolocation.getCurrentPosition(
            (position) => {
                const { latitude: lat, longitude: lon } = position.coords;
                const prefilledUrl = `${GOOGLE_FORM_URL}?usp=pp_url&${LATITUDE_ENTRY_ID}=${lat}&${LONGITUDE_ENTRY_ID}=${lon}`;
                window.open(prefilledUrl, '_blank');
                reportButton.disabled = false;
                reportButton.textContent = 'üìç ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ';
            },
            (error) => {
                console.error('Geolocation error:', error);
                handlePermissionDenied();
            }
        );
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡πâ‡∏ß‡∏¢ Permissions API (‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö)
    if (navigator.permissions && navigator.permissions.query) {
        navigator.permissions.query({ name: 'geolocation' }).then((result) => {
            if (result.state === 'granted') {
                reportButton.addEventListener('click', requestLocation);
            } else if (result.state === 'prompt') {
                reportButton.addEventListener('click', requestLocation);
                // ‡∏Ñ‡∏≠‡∏¢‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏à‡πÑ‡∏õ‡∏Å‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å
                result.onchange = () => {
                    if (result.state === 'denied') {
                        handlePermissionDenied();
                    }
                };
            } else if (result.state === 'denied') {
                handlePermissionDenied();
            }
        });
    } else if (navigator.geolocation) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Permissions API
        reportButton.addEventListener('click', requestLocation);
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Geolocation ‡πÄ‡∏•‡∏¢
        reportButton.disabled = true;
        reportButton.textContent = '‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Geolocation';
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', setupReportButton);


/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ Google Maps API &callback=initApp)
 */
async function initApp() {
    const { Map } = await google.maps.importLibrary("maps");
    map = new Map(document.getElementById("map"), {
        center: { lat: 17.62, lng: 100.09 }, // ‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
        zoom: 10,
        mapId: "FLOOD_REPORT_MAP_V1" // ‡πÉ‡∏ä‡πâ Map ID ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Google Cloud Console
    });
    await fetchData();
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ API ‡∏Ç‡∏≠‡∏á Google Apps Script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
 */
async function fetchData() {
    const loading = document.getElementById('loading');
    loading.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...';
    loading.style.display = 'block';

    try {
        const response = await fetch(API_URL);
        const data = await response.json();

        if (Array.isArray(data)) {
            loading.style.display = 'none';
            allData = data; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô global variable
            renderCards(allData);
            renderMarkers(allData);
        } else if (data && data.error) {
            throw new Error("Error from Google Apps Script: " + data.error);
        } else {
            throw new Error("Received unexpected data format from API.");
        }
    } catch (error) {
        loading.textContent = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message;
        console.error('Error fetching data:', error);
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÉ‡∏ö‡πÉ‡∏ô Sidebar
 */
function renderCards(data) {
    const container = document.getElementById('card-container');
    container.innerHTML = ''; // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô

    data.forEach((rowData, index) => {
        const card = document.getElementById('card-template').content.cloneNode(true).querySelector('.card');
        card.id = `card-${index}`; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á

        // --- ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è [‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Index ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì] ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è ---
        const type = rowData[1]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (B)
        const details = rowData[2]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (C)
        // lat/lng ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö marker
        const mediaLink = rowData[5]; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏∑‡πà‡∏≠ (F)
        const status = rowData[8] || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Status (I)
        // --- ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è [‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö] ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è ---

        card.querySelector('.type').textContent = type || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
        card.querySelector('.details').textContent = details || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';

        // --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Media (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠) ---
        if (mediaLink) {
            if (mediaLink.includes("youtube.com") || mediaLink.includes("youtu.be")) {
                let videoId = mediaLink.split('v=')[1] || mediaLink.split('/').pop();
                if (videoId) {
                    const ampersandPosition = videoId.indexOf('&');
                    if (ampersandPosition !== -1) { videoId = videoId.substring(0, ampersandPosition); }
                    const videoContainer = card.querySelector('.card-video-container');
                    if (videoContainer) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
                        videoContainer.style.display = 'block';
                        videoContainer.querySelector('.card-video').src = `https://www.youtube.com/embed/${videoId}`;
                    }
                }
            } else if (mediaLink.match(/\.(jpeg|jpg|gif|png)$/i)) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                const imageElement = card.querySelector('.card-image');
                if (imageElement) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
                    imageElement.style.display = 'block';
                    imageElement.src = mediaLink;
                }
            } else if (mediaLink.includes("drive.google.com")) { // ‡∏•‡∏¥‡∏á‡∏Å‡πå Google Drive (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ)
                 const fileIdMatch = mediaLink.match(/id=([-\w]+)/);
                 if (fileIdMatch && fileIdMatch[1]) {
                    const imageElement = card.querySelector('.card-image');
                    if (imageElement) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
                        imageElement.style.display = 'block';
                        // ‡πÉ‡∏ä‡πâ thumbnail service ‡∏Ç‡∏≠‡∏á Google Drive
                        imageElement.src = `https://drive.google.com/thumbnail?id=${fileIdMatch[1]}`;
                    }
                 }
            }
        }
        
        // --- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞ Dropdown ---
        const statusDiv = card.querySelector('.card-status');
        statusDiv.textContent = status;
        statusDiv.className = `card-status ${status === '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' ? 'status-completed' : 'status-pending'}`;
        
        const statusDropdown = document.createElement('select'); // ‡∏™‡∏£‡πâ‡∏≤‡∏á dropdown ‡πÉ‡∏´‡∏°‡πà
        statusDropdown.className = 'status-dropdown';
        ['‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'].forEach(optionText => {
            const option = document.createElement('option');
            option.value = optionText;
            option.textContent = optionText;
            statusDropdown.appendChild(option);
        });
        statusDropdown.value = status; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á dropdown ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

        if (status === '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') {
            statusDropdown.disabled = true; // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        } else {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            statusDropdown.addEventListener('change', (event) => {
                updateStatus(index, event.target.value, statusDropdown, card);
            });
        }
        card.appendChild(statusDropdown); // ‡πÄ‡∏û‡∏¥‡πà‡∏° dropdown ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î

        container.appendChild(card);
    });
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏°‡∏∏‡∏î: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î
 */
async function renderMarkers(data) {
    const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
    const { InfoWindow } = await google.maps.importLibrary("maps");

    // ‡∏•‡∏ö marker ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    mapMarkers.forEach(marker => marker.map = null);
    mapMarkers.length = 0; // ‡∏•‡πâ‡∏≤‡∏á array

    data.forEach((rowData, index) => {
        // --- ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è [‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Index ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì] ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è ---
        const type = rowData[1];
        const details = rowData[2];
        const lat = parseFloat(rowData[3]); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Latitude (D)
        const lng = parseFloat(rowData[4]); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Longitude (E)
        // --- ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è [‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö] ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è ---

        if (isNaN(lat) || isNaN(lng)) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

        const marker = new AdvancedMarkerElement({
            position: { lat, lng },
            map: map,
            title: type, // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover ‡∏ó‡∏µ‡πà marker
        });

        const infoWindow = new InfoWindow({
            content: `<div><h4>${type || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'}</h4><p>${details || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}</p></div>`,
        });
        
        // --- Hover effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Marker ---
        marker.content.addEventListener("mouseover", () => {
            infoWindow.open({ map, anchor: marker });
            highlightCard(index); // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        });
        marker.content.addEventListener("mouseout", () => {
            infoWindow.close();
            unhighlightCard(index); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î
        });

        // --- ‡∏Ñ‡∏•‡∏¥‡∏Å Marker ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î ---
        marker.addListener("gmp-click", () => {
            const cardElement = document.getElementById(`card-${index}`);
            if (cardElement) {
                // ‡∏•‡∏ö‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
                document.querySelectorAll('.card').forEach(c => c.classList.remove('highlight'));
                // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
                cardElement.classList.add('highlight');
                // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏±‡πâ‡∏ô
                cardElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        });

        mapMarkers.push(marker); // ‡πÄ‡∏û‡∏¥‡πà‡∏° marker ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array
    });
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î
 */
function highlightCard(index) {
    const cardElement = document.getElementById(`card-${index}`);
    if (cardElement) {
        cardElement.classList.add('highlight');
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î
 */
function unhighlightCard(index) {
    const cardElement = document.getElementById(`card-${index}`);
    if (cardElement) {
        cardElement.classList.remove('highlight');
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà Apps Script (doPost)
 */
async function updateStatus(rowIndex, newStatus, dropdownElement, cardElement) {
    const originalStatus = dropdownElement.value;
    dropdownElement.disabled = true; // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô dropdown ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    cardElement.style.opacity = 0.7; // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡πÅ‡∏™‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î

    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            mode: 'cors', // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Apps Script API
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ row: rowIndex, status: newStatus }) // ‡∏™‡πà‡∏á rowIndex ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà
        });
        const result = await response.json();

        if (result.status === 'success') {
            await fetchData(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        } else {
            throw new Error(result.message || "Unknown error from server.");
        }
    } catch (error) {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ' + error.message);
        console.error('Error updating status:', error);
        dropdownElement.value = originalStatus; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        dropdownElement.disabled = false; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô dropdown
        cardElement.style.opacity = 1; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡πÅ‡∏™‡∏á
    }
}


